{"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/demo\/viewstate-+-viewstateholder"]}],"identifier":{"url":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade","kind":"task"}],"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Facade"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak","sections":[{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Signals","sections":[{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0"}]}],"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/-----------------------View"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/---------------------State","projects":[{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding","sections":[{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State"},{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder","sections":[{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/NavigationState","sections":[{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState"}]}],"reference":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/---------"}],"paths":[["doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents","doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/$volume","doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/---------------------State"]]},"sections":[{"title":"ViewState, UniversalState и ViewStateHolder","chapter":"Внутренний и внешний State","kind":"hero","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"type":"text","text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры."},{"type":"text","text":" "},{"type":"text","text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"SwiftUI предлагает использовать для этого State-свойства, которые хранят данные и обновляют View при изменении.","type":"text"}]}]},{"tasks":[{"stepsSection":[{"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Рассмотрим простейший список."}]}],"code":"ViewState-01-01.swift","runtimePreview":null},{"media":null,"runtimePreview":null,"type":"step","code":"ViewState-01-02.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Очевидно, что в качестве ViewState можно выбрать массив заголовков."}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Основная задача ViewStateHolder - подписаться на сервис и сконвертировать бизнес-модель в данные для View.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Обратите внимание, что ViewStateHolder является "},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":"."}]}],"code":"ViewState-01-03.swift","content":[{"inlineContent":[{"type":"text","text":"ViewStateHolder в таком случае будет содержать одно "},{"code":"@Published","type":"codeVoice"},{"text":" свойство - массив заголовков.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null},{"caption":[{"inlineContent":[{"text":"То есть, привязать цикл перерисовки View к изменениям внутри ViewStateHolder.","type":"text"}],"type":"paragraph"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Это необходимо для того, чтобы в корневом View подключить ViewStateHolder как "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":"."}]}],"code":"ViewState-01-04.swift","runtimePreview":null,"type":"step"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Эта обертка раскрывается в момент вызова "},{"type":"codeVoice","code":"viewState.buildView"},{"text":". Она основана на ","type":"text"},{"code":"@ViewBuilder","type":"codeVoice"},{"type":"text","text":" функции, которая вставит заранее заготовленные View, в соответствии с текущим ViewState."}]}],"content":[{"inlineContent":[{"text":"Для того, чтобы добавить на наш экран обработку ошибок и состояния загрузки, можно использовать ","type":"text"},{"type":"codeVoice","code":"UniversalState"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"ViewState-01-05.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Симуляция получения массива заголовков из сети может выглядеть так.","type":"text"}]}],"runtimePreview":null,"caption":[],"code":"ViewState-01-06.swift","media":null,"type":"step"}],"title":"Примеры организации ViewState","anchor":"Примеры-организации-ViewState","contentSection":[{"mediaPosition":"trailing","media":"viewstate+flow.png","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Для маленьких View и переиспользуемых компонентов достаточно использовать "},{"code":"@State","type":"codeVoice"},{"text":" и ","type":"text"},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":", но для больших и сложных экранов требуется масштабируемое решение, наподобие ViewModel. Поэтому мы придумали концепцию ViewState."}]},{"type":"paragraph","inlineContent":[{"text":"Вы можете ознакомиться с диаграммой взаимодействия между сервисным слоем и View через ViewState на диаграмме.","type":"text"}]}]}]},{"stepsSection":[{"caption":[{"type":"paragraph","inlineContent":[{"text":"Тот же список, но с возможностью выбора элементов из списка.","type":"text"}]}],"type":"step","code":"ViewState-02-01.swift","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Рассмотрим пример чуть сложнее предыдущего.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Смоделлируем Unit сервис этого State-модуля."}]}],"media":null,"code":"ViewState-02-02.swift","runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Для получения списка мы обращаемся к сети."},{"text":" ","type":"text"},{"type":"text","text":"Ошибки оставляем в результирующем "},{"code":"AnyPublisher","type":"codeVoice"},{"type":"text","text":"."}]}]},{"runtimePreview":null,"code":"ViewState-02-03.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Выбор элемента обрабатываем как входящую команду.","type":"text"},{"type":"text","text":" "},{"text":"Записываем в ","type":"text"},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":". Старт загрузки списка - тоже команда."}]}],"caption":[],"type":"step"},{"type":"step","code":"ViewState-02-04.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Комбинируем цепочки. Кэшируем приходящий список в ","type":"text"},{"code":"CurrentValueSubject","type":"codeVoice"},{"text":".","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Не инициализируем ","type":"text"},{"type":"codeVoice","code":"cancellable"},{"type":"text","text":" и не вызываем "},{"code":"sink","type":"codeVoice"},{"type":"text","text":" на этом уровне."},{"type":"text","text":" "},{"text":"Используем ","type":"text"},{"code":"flatMap","type":"codeVoice"},{"type":"text","text":", "},{"code":"map","type":"codeVoice"},{"text":" и ","type":"text"},{"type":"codeVoice","code":"handleEvents"},{"text":" для преобразований.","type":"text"}]}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Добавляем отслеживание загрузки списка.","type":"text"}]}],"code":"ViewState-02-05.swift","caption":[],"media":null,"type":"step","runtimePreview":null},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Обрабатываем результат Unit в ViewStateHolder.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"Подписываемся на результат и на ","type":"text"},{"code":"processing","type":"codeVoice"},{"type":"text","text":", чтобы обработка команды выполнилась."}]}],"code":"ViewState-02-06.swift"},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Обрабатываем ошибки."}]}],"type":"step","media":null,"code":"ViewState-02-07.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Отслеживаем стейт загрузки.","type":"text"}]}],"caption":[],"media":null,"code":"ViewState-02-08.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Прикрепляем ViewStateHolder к View.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"ViewState-02-09.swift"},{"media":null,"code":"ViewState-02-10.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Устанавливаем Weakreference на Unit во View."}]}],"type":"step","caption":[]}],"anchor":"Примеры-обмена-данными-между-View-и-State-через-ViewStateHolder","contentSection":[{"media":"viewstateholder+unit.png","content":[{"inlineContent":[{"text":"На уровне Flow модули начинают делиться горизонтально на UI часть и State.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Введем понятие Unit для обозначения объекта, который будет формировать Business-State."},{"text":" ","type":"text"},{"text":"Это может быть обертка над клиентом сетевого слоя, хранилищем или любым другим сервисом.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"ViewStateHolder будет преобразовывать данные из Unit в данные для View. View будет обращаться к Unit через WeakReference на вспомогательный протокол."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Примеры обмена данными между View и State через ViewStateHolder"}],"kind":"tasks"},{"kind":"callToAction","title":"Горизонтальный стек - push\/pop","abstract":[{"text":"Начиная с iOS 16, в SwiftUI доступен ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":", который позволяет управлять навигацией в приложении.","type":"text"}],"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/NavigationState","isActive":true,"type":"reference"},"featuredEyebrow":"Tutorial"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"categoryPathComponent":"Table-of-contents","role":"project","title":"ViewState, UniversalState и ViewStateHolder","category":"Оглавление"},"references":{"ViewState-01-04.swift":{"fileType":"swift","syntax":"swift","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: ViewState = .init(titles: [])","}","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: ViewState","","    init(viewState: Binding<ViewState>) {","        self._viewState = viewState","    }","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"],"highlights":[{"line":4},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"fileName":"TutorScreen.swift","identifier":"ViewState-01-04.swift","type":"file"},"ViewState-01-02.swift":{"identifier":"ViewState-01-02.swift","fileType":"swift","type":"file","fileName":"TutorScreen.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":15},{"line":19}],"content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @State private var viewState: ViewState = .init(titles: [","        \"View\",","        \"State\",","        \"Unit\",","        \"Router\",","        \"Factory\"","    ])","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"],"syntax":"swift"},"doc://dev.surf.sui-core.Demo/tutorials/Table-of-contents/---------------------State":{"identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/---------------------State","abstract":[],"kind":"article","role":"article","type":"topic","url":"\/tutorials\/table-of-contents\/---------------------state","title":"Внутренний и внешний State"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State":{"abstract":[{"text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это ","type":"text"},{"type":"codeVoice","code":"@State"},{"type":"text","text":" и "},{"type":"codeVoice","code":"@Binding"},{"text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия.","type":"text"}],"url":"\/tutorials\/demo\/state-vs-binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State","type":"section","role":"pseudoSymbol","kind":"section","title":"Применение и возможности State","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State"},"ViewState-01-01.swift":{"fileName":"TutorScreen.swift","content":["import SwiftUI","","struct TutorScreen: View {","","    @State private var titles: [String] = [","        \"View\",","        \"State\",","        \"Unit\",","        \"Router\",","        \"Factory\"","    ]","","    var body: some View {","        List {","            ForEach(titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"],"syntax":"swift","identifier":"ViewState-01-01.swift","highlights":[],"type":"file","fileType":"swift"},"ViewState-02-07.swift":{"identifier":"ViewState-02-07.swift","fileType":"swift","type":"file","fileName":"TutorStateHolder.swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .error(","                        ExceptionView.Model(title: \"Ошибка\",","                                            message: error.localizedDescription,","                                            action: ExceptionView.Action(title: \"Повторить\",","                                                                         action: {","                            self.titlesProvider?.requestTitles()","                        }))","                    )","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","    }","","}"],"syntax":"swift"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/NavigationState":{"role":"project","abstract":[{"text":"Начиная с iOS 16, в SwiftUI доступен ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":", который позволяет управлять навигацией в приложении.","type":"text"}],"kind":"project","type":"topic","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/NavigationState","title":"Горизонтальный стек - push\/pop","estimatedTime":"10min","url":"\/tutorials\/demo\/navigationstate"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Environment+Weak#Check-Your-Understanding":{"title":"Check Your Understanding","type":"link","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/demo\/environment+weak#Check-Your-Understanding"},"doc://dev.surf.sui-core.Demo/tutorials/Table-of-contents/-----------------------View":{"abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/-----------------------View","url":"\/tutorials\/table-of-contents\/-----------------------view","role":"article","title":"Связь между модулями и View"},"ViewState-02-06.swift":{"identifier":"ViewState-02-06.swift","fileType":"swift","type":"file","fileName":"TutorStateHolder.swift","highlights":[],"content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .normal(model: [])","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","    }","","}"],"syntax":"swift"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9":{"abstract":[{"type":"text","text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment."}],"url":"\/tutorials\/demo\/environment+weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9","type":"section","role":"pseudoSymbol","kind":"section","title":"Передача значений","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder":{"abstract":[{"text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д."}],"kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","url":"\/tutorials\/demo\/viewstate-+-viewstateholder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","title":"Примеры обмена данными между View и State через ViewStateHolder"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Facade":{"abstract":[{"text":"Иными словами это Input и Output модуля.","type":"text"}],"kind":"project","estimatedTime":"5min","type":"topic","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Facade","url":"\/tutorials\/demo\/facade","role":"project","title":"Facade как лицо модуля"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject":{"abstract":[{"text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment.","type":"text"}],"url":"\/tutorials\/demo\/environment+weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","kind":"section","role":"pseudoSymbol","title":"Weak - Наша альтернатива EnvironmentObject","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","type":"section"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade":{"role":"pseudoSymbol","abstract":[{"text":"Иными словами это Input и Output модуля.","type":"text"}],"kind":"section","type":"section","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade","title":"Пример формирования Facade","url":"\/tutorials\/demo\/facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade"},"ViewState-01-06.swift":{"identifier":"ViewState-01-06.swift","syntax":"swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: UniversalViewState<[String]> = .loading","","    func fetchTitles() {","        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in","            if Bool.random() {","                self.state = .normal(model: [","                    \"View\",","                    \"State\",","                    \"Unit\",","                    \"Router\",","                    \"Factory\"","                ])","            } else {","                self.state = .error(","                    ExceptionView.Model(title: \"Ошибка\",","                                        message: \"Не удалось загрузить заголовки\",","                                        action: ExceptionView.Action(title: \"Повторить\",","                                                                     action: {","                    self?.fetchTitles()","                }","            }","        }","    }","}","","struct TutorScreen: View {","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Text(title)","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"],"type":"file","fileName":"TutorScreen.swift"},"ViewState-02-04.swift":{"type":"file","syntax":"swift","identifier":"ViewState-02-04.swift","fileName":"TutorUnit.swift","fileType":"swift","highlights":[{"line":4},{"line":18},{"line":21},{"line":23},{"line":25},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}],"content":["import Combine","","protocol TitlesProvider {","    var processing: AnyPublisher<Void, Never> { get }","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","    private let titlesSubject: CurrentValueSubject<[String]>, Never> = .init(.success([]))","","    private let service: TitlesService","    private let storage: any ValueStore<String>","","    init(service: TitlesService, storage: any ValueStore<String>) {","        self.service = service","        self.storage = storage","    }","","    \/\/ MARK: - TitlesProvider","","    var processing: AnyPublisher<Void, Never> {","        return selectTitleSubject","            .flatMap { title in","                titlesSubject.first(where: { $0 == title })","            }","            .handleEvents(receiveOutput: { [weak self] title in","                storage.save(value: title)","            })","            .map { _ in }","            .eraseToAnyPublisher()","    }","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject.flatMap { _ in","            return service.getTitles()","        }.handleEvents(receiveOutput: { [weak self] result in","            switch result {","            case .success(let titles):","                self?.titlesSubject.send(titles)","            case .failure:","                break","            }","        }).eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/State-vs-Binding#Check-Your-Understanding":{"title":"Check Your Understanding","type":"link","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/demo\/state-vs-binding#Check-Your-Understanding"},"ViewState-02-10.swift":{"identifier":"ViewState-02-10.swift","fileType":"swift","type":"file","fileName":"TutorScreen.swift","highlights":[{"line":10},{"line":21},{"line":27},{"line":28},{"line":29},{"line":47}],"content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","    @WeakReference private var titlesUnit: TitlesUnitInput?","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        titlesUnit?.selectTitle(title)","                    } label: {","                        Text(title)","                    }","                }","            }","        }.onAppear(perform: {","            titlesUnit?.requestTitles()","        })","    }","}","","public struct TutorViewGroup: View {","","    private let titlesUnit: TitlesUnit","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        let titlesUnit = TitlesStateModuleFacade.titlesUnit","        self._viewStateHolder = .init(wrappedValue: .init(titlesProvider: titlesUnit))","        self.titlesUnit = titlesUnit","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","            .weakReference(titlesUnit, as: TitlesUnitInput.self)","    }","","}"],"syntax":"swift"},"viewstateholder+unit.png":{"alt":"ViewStateHolder and Unit place","type":"image","identifier":"viewstateholder+unit.png","variants":[{"url":"\/images\/dev.surf.sui-core.Demo\/viewstateholder+unit.png","traits":["1x","light"]}]},"ViewState-02-01.swift":{"identifier":"ViewState-02-01.swift","fileType":"swift","type":"file","fileName":"TutorScreen.swift","highlights":[],"content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        debugPrint(\"Выбран элемент: \\(title)\")","                    } label: {","                        Text(title)","                    }","                }","            }","        }","    }","}"],"syntax":"swift"},"doc://dev.surf.sui-core.Demo/tutorials/Table-of-contents":{"abstract":[],"url":"\/tutorials\/table-of-contents","type":"topic","role":"overview","title":"Обучающие материалы по VSURF","kind":"overview","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState":{"abstract":[{"text":"Начиная с iOS 16, в SwiftUI доступен ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":", который позволяет управлять навигацией в приложении."}],"url":"\/tutorials\/demo\/navigationstate#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState","type":"section","role":"pseudoSymbol","kind":"section","title":"Пример использования NavigationState","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState"},"ViewState-02-05.swift":{"fileType":"swift","syntax":"swift","content":["import Combine","","protocol TitlesProvider {","    var processing: AnyPublisher<Void, Never> { get }","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","    var isLoading: AnyPublisher<Bool, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","    private let titlesSubject: CurrentValueSubject<[String]>, Never> = .init(.success([]))","    private let isLoadingValueSubject: CurrentValueSubject<Bool, Never> = .init(false)","","    private let service: TitlesService","    private let storage: any ValueStore<String>","","    init(service: TitlesService, storage: any ValueStore<String>) {","        self.service = service","        self.storage = storage","    }","","    \/\/ MARK: - TitlesProvider","","    var isLoading: AnyPublisher<Bool, Never> {","        return isLoadingValueSubject.eraseToAnyPublisher()","    }","","    var processing: AnyPublisher<Void, Never> {","        return selectTitleSubject","            .flatMap { title in","                titlesSubject.first(where: { $0 == title })","            }","            .handleEvents(receiveOutput: { [weak self] title in","                storage.save(value: title)","            })","            .map { _ in }","            .eraseToAnyPublisher()","    }","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject","            .handleEvents(receiverOutput: { [weak self] _ in","                self?.isLoadingValueSubject.send(true)","            })","            .flatMap { _ in","                return service.getTitles()","        }.handleEvents(receiveOutput: { [weak self] result in","            self?.isLoadingValueSubject.send(false)","            switch result {","            case .success(let titles):","                self?.titlesSubject.send(titles)","            case .failure:","                break","            }","        }).eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"],"highlights":[{"line":6},{"line":20},{"line":32},{"line":33},{"line":34},{"line":35},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":56}],"fileName":"TutorUnit.swift","identifier":"ViewState-02-05.swift","type":"file"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Environment+Weak":{"abstract":[{"text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment.","type":"text"}],"url":"\/tutorials\/demo\/environment+weak","type":"topic","role":"project","kind":"project","title":"Применение Environment","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak","estimatedTime":"15min"},"ViewState-02-09.swift":{"type":"file","syntax":"swift","identifier":"ViewState-02-09.swift","fileName":"TutorScreen.swift","fileType":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}],"content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        debugPrint(\"Выбран элемент: \\(title)\")","                    } label: {","                        Text(title)","                    }","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    private let titlesUnit: TitlesUnit","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        let titlesUnit = TitlesStateModuleFacade.titlesUnit","        self._viewStateHolder = .init(wrappedValue: .init(titlesProvider: titlesUnit))","        self.titlesUnit = titlesUnit","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"]},"viewstate+flow.png":{"alt":"ViewState Flow cycle","type":"image","identifier":"viewstate+flow.png","variants":[{"url":"\/images\/dev.surf.sui-core.Demo\/viewstate+flow.png","traits":["1x","light"]}]},"doc://dev.surf.sui-core.Demo/tutorials/Table-of-contents/---------":{"abstract":[],"url":"\/tutorials\/table-of-contents\/---------","type":"topic","role":"article","kind":"article","title":"Навигация","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Table-of-contents\/---------"},"ViewState-01-03.swift":{"type":"file","fileName":"TutorScreen.swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18}],"identifier":"ViewState-01-03.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var titles: ViewState = .init(titles: [])","}","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: ViewState","","    init(viewState: Binding<ViewState>) {","        self._viewState = viewState","    }","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/State-vs-Binding":{"title":"State vs Binding","role":"project","type":"topic","estimatedTime":"10min","abstract":[{"text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это ","type":"text"},{"type":"codeVoice","code":"@State"},{"type":"text","text":" и "},{"type":"codeVoice","code":"@Binding"},{"text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия.","type":"text"}],"kind":"project","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding","url":"\/tutorials\/demo\/state-vs-binding"},"ViewState-02-03.swift":{"content":["import Combine","","protocol TitlesProvider {","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","","    private let service: TitlesService","","    init(service: TitlesService) {","        self.service = service","    }","","    \/\/ MARK: - TitlesProvider","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject.flatMap { _ in","            return service.getTitles()","        }.eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"],"fileName":"TutorUnit.swift","fileType":"swift","syntax":"swift","type":"file","identifier":"ViewState-02-03.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":27},{"line":28},{"line":29},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/demo\/viewstate-+-viewstateholder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState","title":"Примеры организации ViewState","abstract":[{"text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры.","type":"text"},{"text":" ","type":"text"},{"text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д.","type":"text"}],"kind":"section","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState"},"ViewState-02-08.swift":{"type":"file","fileName":"TutorStateHolder.swift","highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}],"identifier":"ViewState-02-08.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .error(","                        ExceptionView.Model(title: \"Ошибка\",","                                            message: error.localizedDescription,","                                            action: ExceptionView.Action(title: \"Повторить\",","                                                                         action: {","                            self.titlesProvider?.requestTitles()","                        }))","                    )","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","","        titlesProvider?.isLoading","            .sink { [weak self] isLoading in","                if isLoading {","                    self?.state = .loading","                }","            }","            .store(in: &cancellable)","    }","","}"]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding":{"title":"Применение и возможности Binding","role":"pseudoSymbol","type":"section","url":"\/tutorials\/demo\/state-vs-binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding","abstract":[{"text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это ","type":"text"},{"type":"codeVoice","code":"@State"},{"type":"text","text":" и "},{"type":"codeVoice","code":"@Binding"},{"text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия.","type":"text"}],"kind":"section","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9":{"type":"section","role":"pseudoSymbol","title":"Передача стилей","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9","abstract":[{"text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment.","type":"text"}],"kind":"section","url":"\/tutorials\/demo\/environment+weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9"},"ViewState-02-02.swift":{"content":["import Combine","","protocol TitlesProvider {","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","final class TitlesUnit: TitlesProvider {","","    private let service: TitlesService","","    init(service: TitlesService) {","        self.service = service","    }","","    \/\/ MARK: - TitlesProvider","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return service.getTitles()","    }","","}"],"fileName":"TutorUnit.swift","fileType":"swift","syntax":"swift","type":"file","identifier":"ViewState-02-02.swift","highlights":[]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0":{"abstract":[{"text":"Сущность ","type":"text"},{"code":"Signal","type":"codeVoice"},{"text":" это протокол, используемый для оповещения модулей верхнего уровня о ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"событиях"}]},{"text":", происходящих в других модулях.","type":"text"}],"kind":"section","url":"\/tutorials\/demo\/signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0","type":"section","title":"Пример отправки и обработки сигнала","role":"pseudoSymbol"},"doc://dev.surf.sui-core.Demo/tutorials/Demo/ViewState-+-ViewStateHolder":{"abstract":[{"type":"text","text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры."},{"type":"text","text":" "},{"text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д.","type":"text"}],"url":"\/tutorials\/demo\/viewstate-+-viewstateholder","type":"topic","role":"project","kind":"project","title":"ViewState, UniversalState и ViewStateHolder","identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/ViewState-+-ViewStateHolder","estimatedTime":"20min"},"ViewState-01-05.swift":{"type":"file","fileName":"TutorScreen.swift","highlights":[{"line":4},{"line":9},{"line":11},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"identifier":"ViewState-01-05.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: UniversalViewState<[String]> = .loading","}","","struct TutorScreen: View {","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Text(title)","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"]},"doc://dev.surf.sui-core.Demo/tutorials/Demo/Signals":{"identifier":"doc:\/\/dev.surf.sui-core.Demo\/tutorials\/Demo\/Signals","abstract":[{"text":"Сущность ","type":"text"},{"code":"Signal","type":"codeVoice"},{"type":"text","text":" это протокол, используемый для оповещения модулей верхнего уровня о "},{"inlineContent":[{"text":"событиях","type":"text"}],"type":"strong"},{"text":", происходящих в других модулях.","type":"text"}],"kind":"project","role":"project","type":"topic","url":"\/tutorials\/demo\/signals","estimatedTime":"10min","title":"Оповещение других модулей"}}}